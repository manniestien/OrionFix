"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var types_1 = require("../types");
var utils_1 = require("../utils");
exports.Path = function (_a) {
    var data = _a.data, _b = _a.pathVariables, onClick = _b.onClick, rx = _b.rx, ry = _b.ry, height = _b.height, ir = _b.ir, moveDistance = _b.moveDistance, moveElement = _b.moveElement, showTooltips = _b.showTooltips, stroke = _b.stroke, strokeWidth = _b.strokeWidth, tooltipShowName = _b.tooltipShowName, tooltipShowPercentage = _b.tooltipShowPercentage, tooltipShowValue = _b.tooltipShowValue, type = _a.type;
    var handleOnClick = function () {
        moveElement(data.startAngle);
        onClick(data.index);
    };
    var createPath = function () {
        switch (type) {
            case types_1.PathType.End:
                return utils_1.createEndWallPath(data, rx, ry, height, ir);
            case types_1.PathType.Inner:
                return utils_1.createInnerPath(data, rx, ry, height, ir);
            case types_1.PathType.Outer:
                return utils_1.createOuterPath(data, rx, ry, height);
            case types_1.PathType.Start:
                return utils_1.createStartWallPath(data, rx, ry, height, ir);
            case types_1.PathType.Top:
                return utils_1.createTopPath(data, rx, ry, ir);
            default:
                throw Error('No such path type');
        }
    };
    var styles = { fill: data.color, cursor: 'pointer' };
    var label = data.label ? data.label : '';
    var tooltipName = tooltipShowName && label ? label + " " : '';
    var tooltipText = "" + tooltipName + (tooltipShowValue ? data.value : '') + " " +
        ("" + (tooltipShowPercentage ? (data.percentageValue * 100).toFixed(2) + '%' : ''));
    var transformation = data.moved ? "translate(" + utils_1.calculateNewPosition(data, rx, ry, moveDistance) + ")" : 'translate(0,0)';
    return (react_1.default.createElement("path", { d: createPath(), onClick: handleOnClick, stroke: stroke, strokeWidth: strokeWidth, style: styles, transform: transformation }, showTooltips && react_1.default.createElement("title", { className: "chart-tooltip" }, tooltipText)));
};
